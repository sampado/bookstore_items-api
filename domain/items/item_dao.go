package items

import (
	"encoding/json"
	"errors"
	"fmt"

	"github.com/sampado/bookstore_items-api/clients/elasticsearch"
	"github.com/sampado/bookstore_utils-go/rest_errors"
)

const (
	indexItems = "items"
)

func (i *Item) Save() rest_errors.RestError {
	result, err := elasticsearch.Client.Index(indexItems, i)
	if err != nil {
		return rest_errors.NewInternalServerError("Error persisting the item", errors.New("database error"))
	}

	// use as Item ID the ID generated by Elastic Search
	i.Id = result.Id

	return nil
}

func (i *Item) Get() rest_errors.RestError {
	itemId := i.Id
	result, err := elasticsearch.Client.Get(indexItems, i.Id)
	if err != nil {
		return rest_errors.NewInternalServerError("Error persisting the item", errors.New("database error"))
	}

	if !result.Found {
		return rest_errors.NewNotFoundError(fmt.Sprintf("Item not found for given id [%s]", i.Id))
	}

	bytes, err := result.Source.MarshalJSON()
	if err != nil {
		return rest_errors.NewInternalServerError("error when trying to parse DB response into item", errors.New("database error"))
	}
	if err := json.Unmarshal(bytes, i); err != nil {
		return rest_errors.NewInternalServerError("error when trying to parse DB response into item", errors.New("database error"))
	}
	i.Id = itemId

	return nil
}
